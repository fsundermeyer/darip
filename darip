#!/bin/bash
#
# darip: DVD Audio Ripper for Linux
# Copyright 2017 Frank Sundermeyer
#
# Licensed under the GPL 2.0 or GPL 3.0 at your choice
#
# Inspired by Philippe Gachoud's answer in
# http://askubuntu.com/questions/24326/how-do-i-rip-audio-from-a-dvd

# TODO
#
# 1. Range of tracks to be ripped (1,2,4,5 | 2-12)

exit_on_error() {
    echo -e "$1"
    exit 1
}

darip_help() {
    cat <<EOF
Usage:
  $ME [OPTIONS] [TRACKS]

See the list of option below.

The list of tracks is to be provided as a comma-separated list, ranges are
supported (e.g. "1,2,5-9,15"). If no tracks are specified, all tracks from
the selected title will be ripped.

General Options:
----------------

  --help                  Print this help screen.

  --outdir=PATH           Path to the output directory. If one or more of
                          artist, albumtitle, and year are specified, the
                          output will go to OUTDIR/ARTIST/YEAR_ALBUM
                          Default: $HOME/Music

  --purge=CHARACTER_LIST  Space-separated list of characters that will be
                          removed from file and directory names. |\:*?$!
                          plus spaces and periods at the beginning and
                          the end of names will always be removed. With this
                          parameter you can specify _additional_ characters
                          that should be replaced.
                          Default: Empty

  --stripspace=(0|1)      Specify whether you want to replace spaces in
                          file or directory names with underscores (1) or
                          not (0).
                          Default: 1 (spaces will be replaced)

  --preset=(medium|       VBR Lame preset. Refer to man lame for more
            standard|     information.
            extreme|      Default: insane
            insane)

Tagging Options:
----------------

  --album="ALBUMTITLE",   If one or more of the following options is set,
  --artist="ARTIST",      the mp3 files will automatically be tagged with the
  --comment="COMMENT",    specified data. Album, artist and year will also
  --genre="GENRE",        be used for the output directory (see --outdir).
  --year="YEAR"           Default: unset

  --gain=(album|track)    Apply album or track gain to the mp3 files.
                          Requires mp3gain to be installed.
                          Default: unset (no gain will be applied)

Track titles and numbers will not be written. DVDs usually contain additional
tracks at the beginning or end of the tracklist (e.g. background music for the
menu and/or the credits), which you probably want to remove in a
post-processing step. Titles and track numbers would very likely be wrong in
this case.

Expert Options:
---------------

  --device                DVD device.
                          Default: /dev/sr0

  --seeksize              By default the first 10 MB of the DVD files are
                          scanned to detect all subtitles and audio tracks.
                          This should usually be sufficient. If not all tracks
                          are found on you DVD, increase this value.
                          Default: 10

EOF
}

cleanse_path() {
    local _CHAR _PATH _PURGE
    _PATH="$1"
    _PURGE="$PURGE $PURGE_USER"
    # iterate over characters in _PURGE and remove them from _PATH
    for _CHAR in $_PURGE; do
        _PATH=${_PATH//$_CHAR/}
    done
    # replace spaces if required
    [[ 1 -eq $STRIPSPACE ]] && _PATH=${_PATH// /_}
    echo "$_PATH"
    return
}

cleanse_tags() {
    local _STR
    _STR=$1
    # remove . and space from beginning and end
    _STR=$(cat <<< $_STR | sed 's/^[\.[:space:]]*//')
    _STR=$(cat <<< $_STR | sed 's/[\.[:space:]]$//')
    # replace slashes with underscores
    _STR=${_STR//\//_}
    echo "$_STR"
    return
}

tracklist() {
    local _TRACKS _LIST N
    local -a SEQ
    _TRACKS="$@"
    _TRACKS=${_TRACKS//,/ } # replace commas with space

    for N in $_TRACKS; do
        if [[ $N =~ ^[0-9]{1,}$ ]]; then
            # regular numbers
            #
            _LIST=${_LIST:+"$_LIST $N"} # if _LIST is set, add digit + space
            _LIST=${_LIST:-"$N"} # if _LIST is empty add digit without space
        elif [[ $N =~ ^[0-9]{1,}-[0-9]{1,}$ ]]; then
            # ranges (e.g. 5-11)
            #
            OIFS=$IFS
            IFS=$'-'
            # split range at "-" into an array SEQ
            read -ra SEQ <<< "$N"
            IFS=$OIFS
            [[ ${SEQ[0]} -gt ${SEQ[1]} ]] && exit_on_error "If specifying a range in the tracklist,\nthe start of the range needs to be bigger than the end"
            _LIST="$_LIST $(seq -s ' ' ${SEQ[0]} ${SEQ[1]})"
        else
            # should not occur
            continue
        fi
    done
    echo "$_LIST"
    return
}

trap "exit_on_error '\nCaught SIGTERM/SIGINT'" SIGTERM SIGINT
#trap "cleanup" ERR

# Check if required programs are installed
#
which transcode >/dev/null || exit_on_error "This program requires the package \"transcode\""

if [[ 1 -eq $TAGGING ]]; then
    which id3v2 >/dev/null || exit_on_error "Tagging requires the package \"id3v2\""
fi

if [[ -n $GAINMETHOD ]]; then
    which mp3gain >/dev/null || exit_on_error "Applying gain requires the package \"mp3gain\""
fi

# Defaults
#
OUTDIR="$HOME/Music"
DVDDEV="/dev/sr0"
STRIPSPACE=1

ALBUM=""
ARTIST=""
COMMENT=""
GENRE=""
YEAR=""

TITLE=1
TITLECOUNT=0
CHAPTERCOUNTER=0
CHAPTERID=0
AUDIOTRACK=0
AUDIOPRESET=0
START_RIP=n
TAGGING=0
GAINMETHOD=""
TRACKLIST=""
TRACKCOUNT=0

STRIPSPACE="1"
PURGE="\| \ : \* \? \$ \!"

LAME_PRESET="insane"

# check the first XX MB of the DVD
SEEKSIZE=10
#SEEKSIZE=1

declare -a TITLEINFO
declare -a CHAPTERS
declare -a AUDIOINFO

ME=$(basename $0)

#----------------------------------
# Parsing the command line arguments
#

ARGS=$(getopt -o h -l artist:,album:,comment:,device:,gain:,genre:,help,nospace:,outdir:,preset:,purge:,seeksize:,stripspace:,year: -n "$ME" -- "$@")

# Exit when getopt returns errors
#
GETOPT_RETURN_CODE=$?
[[ 0 != $GETOPT_RETURN_CODE ]] && exit $GETOPT_RETURN_CODE

eval set -- "$ARGS"

while true ; do
    case "$1" in
        --album)
            ALBUM="$2"
            TAGGING=1
            shift 2
           ;;
        --artist)
            ARTIST="$2"
            TAGGING=1
            shift 2
           ;;
        --comment)
            COMMENT="$2"
            TAGGING=1
            shift 2
            ;;
        --device)
            if [[ -b "$2" ]]; then
                DVDDEV="$2"
            else
                exit_on_error "The device specified with --device is not a block device"
            fi
            shift 2
            ;;
        --gain)
            if [[ "album" = "$2" ]]; then
                GAINMETHOD="-a"
            elif [[ "track" = "$2" ]]; then
                GAINMETHOD="-r"
            else
                exit_on_error "Wrong parameter for --gain. Must be 'album' or 'track'"
            fi
            shift 2
            ;;
        --genre)
            GENRE="$2"
            TAGGING=1
            shift 2
           ;;
        --help|-h)
            darip_help
            exit 0
            ;;
        --outdir)
            OUTDIR="$2"
            shift 2
            ;;
        --preset)
            if [[ "medium" = "$2" ||
                  "standard" = "$2" ||
                  "extreme" = "$2" ||
                  "insane" = "$2" ]]; then
                LAME_PRESET="$2"
            else
                exit_on_error "Wrong parameter for --preset. Must be 'medium', 'standard', 'extreme',\nand 'insane'"
            fi
            shift 2
            ;;
        --seeksize)
            if [[ $2 =~ ^[0-9]{2,}$ ]]; then
                SEEKSIZE="$2"
                shift 2
            else
                exit_on_error "The value for --seeksize needs to be entered as at least two digits"
            fi
            ;;
        --purge)
            PURGE_USER="$2"
            shift 2
            ;;
        --stripspace)
            if [[ "$2" =~ ^[01]$ ]]; then
                STRIPSPACE=$2
            else
                exit_on_error "Wrong parameter for --stripspace. Must be '0' or '1'."
            fi
            shift 2
            ;;
        --year)
            if [[ $2 =~ ^[0-9]{4}$ ]]; then
                YEAR="$2"
                TAGGING=1
                shift 2
            else
                exit_on_error "The value for --year needs to be entered as four digits (e.g. 2017)"
            fi
            ;;
        --)
            shift
            break
            ;;
        *)
            exit_on_error "Internal error!"
            ;;
    esac
done

# All the remaining ARGS should be the track list:

if [[ -n "$@" ]]; then
    TRACKLIST="$@"
    [[ $TRACKLIST =~ ^[-0-9,[:space:]]{1,}$ && -n "$TRACKLIST" ]]  || exit_on_error "The tracklist does not match the expected format"
    TRACKLIST=$(tracklist "$TRACKLIST")
fi

# --- Let the fun begin ... -----------------------

#-----
# The output directory
#
[[ -n "$ARTIST" ]] && OUTDIR="$OUTDIR/$(cleanse_tags "$ARTIST")"
if [[ -n "$YEAR" && -n "$ALBUM" ]]; then
    OUTDIR="$OUTDIR/${YEAR}_$(cleanse_tags "$ALBUM")"
else
    if [[ -n "$ALBUM" ]]; then
        OUTDIR="$OUTDIR/$(cleanse_tags "$ALBUM")"
    elif [[ -n "$YEAR" ]]; then
        OUTDIR="$OUTDIR/$YEAR"
    fi
fi

OUTDIR=$(cleanse_path "$OUTDIR")

if [[ ! -d $OUTDIR ]]; then
    mkdir -p $OUTDIR >/dev/null || exit_on_error "Cannot create directory ${OUTDIR}. Missing write permissions?"
fi

echo "Reading DVD information..."

# get number of titles
#
TITLECOUNT=$(tcprobe -i ${DVDDEV} -H ${SEEKSIZE} 2>&1) || exit_on_error "Fatal error: Could not read DVD\nMake sure you have inserted a DVD and libdvdcss2 is installed"
TITLECOUNT=$(cat <<< $TITLECOUNT \
    | sed -n 's/.*DVD title [0-9][0-9]*\/\([^:]*\).*/\1/p')

if [[ 1 -lt $TITLECOUNT ]]; then
    # Get info about each title
    # Remove all lines except the one with DVD title and audio track
    # information
    #
    for (( i=1; i<=${TITLECOUNT}; i++ )); do
        TITLEINFO[$i]=$(tcprobe -i ${DVDDEV} -H ${SEEKSIZE} -T ${i} 2>&1 \
            | grep -E 'DVD title|audio track')
        # Get the amount of chapters for each title
        # We want the preset for the DVD title to be the one with the most
        # chapters $CHAPTERID
        #
        CHAPTERS[$i]=$(echo "${TITLEINFO[$i]}" | head -n1 \
             | sed 's/.*DVD title [0-9][0-9]*\/[^:]*:\s\([0-9][0-9]*\).*/\1/')
        if [[ ${CHAPTERS[$i]} -gt $CHAPTERCOUNTER ]]; then
            CHAPTERCOUNTER=${CHAPTERS[$i]}
            CHAPTERID=$i
        fi

        # We only want to display lines with the titles now
        echo "${TITLEINFO[$i]}" | head -n1 | sed "s/\[[^]]*\]/[${i}]/"
    done

    # User chooses DVD title, preset is CHAPTERID
    #
    while true; do
        read -e -p "Choose a title (1 to ${TITLECOUNT}) [$CHAPTERID]: " TITLE
        [[ -z $TITLE ]] && TITLE=$CHAPTERID
        # loop until we get a valid value
        [[ $TITLE =~ ^-?[0-9]+$ && $TITLE -le $TITLECOUNT ]] && break
    done
else
    TITLEINFO[1]=$(tcprobe -i ${DVDDEV} -H ${SEEKSIZE} -T 1 2>&1 | grep -E 'DVD title|audio track')
    echo "Only one DVD title present, ripping tracks from title ${TITLE}"
fi

echo

# List Audio Tracks and try to choose the correct one
#
AUDIOCOUNT=$(echo "${TITLEINFO[$TITLE]}" | tail -n +2 | wc -l)

if [[ 1 -lt $AUDIOCOUNT ]]; then
    # extract the audioinfo lines from TITLEINFO
    AUDIOINFO=$(echo "${TITLEINFO[$TITLE]}" | tail -n +2 | sed 's/^\s*//g')
    # print the audioinfo lines
    # according to the tcprobe output the line that does _not_ end with
    # (*) is the default audio - probably what we want
    #
    j=0
    while read AI; do
        [[ $AI =~ ^.+\(\*\)$ ]] || AUDIOPRESET="${j}"
        echo "[${j}] ${AI}"
        let j++;
    done <<< "$AUDIOINFO"

    # read the user input
    while true; do
        read -e -p "Choose an audio track [${AUDIOPRESET}]: " AUDIOTRACK
        [[ -z $AUDIOTRACK ]] && AUDIOTRACK=$AUDIOPRESET
        [[ $AUDIOTRACK =~ ^-?[0-9]+$ && $AUDIOTRACK -le $AUDIOCOUNT ]] && break
    done
else
    echo "Only one audio track present, ripping audio track ${AUDIOTRACK}"
fi

echo

# If TRACKLIST is empty, create a list with 1 2 3...${CHAPTERS[$TITLE]}
#
[[ -z "$TRACKLIST" ]] && TRACKLIST=$(seq -s ' ' ${CHAPTERS[$TITLE]})
TRACKCOUNT=$(wc -w <<< $TRACKLIST)


echo "DVD title:  $TITLE
DVD chapters:     ${CHAPTERS[$TITLE]}
DVD audio track:  $AUDIOTRACK
Tracks to rip:    $TRACKLIST
Output directory: $OUTDIR
"

while true; do
        read -e -p "Start ripping ${TRACKCOUNT} audio tracks from DVD title $TITLE? [Y/n] " START_RIP
        [[ -z $START_RIP ]] && START_RIP="y"
        if [[ $START_RIP =~ ^[yY]$ ]]; then
            break
        else
            exit 1
        fi
    done

echo

#for (( i=1; i<=${CHAPTERS[$TITLE]}; i++ )); do
for i in $TRACKLIST; do
    if [[ $i -lt 10 ]]; then
        TRACKNO="0${i}"
    else
        TRACKNO="${i}"
    fi
    transcode -x null,dvd -y null,tcaud -i ${DVDDEV} -T $TITLE,${i},1 \
              -a ${AUDIOTRACK} -E 44100,16,2 --lame_preset ${LAME_PRESET} \
              -m ${OUTDIR}/${TRACKNO}.mp3

    # Tag the resulting file
    if [[ 1 -eq $TAGGING ]]; then
        id3v2 --album "$ALBUM" --artist "$ARTIST" --year "$YEAR" \
          --comment "$COMMENT" --song "" --track "" \
          --genre "$GENRE" ${OUTDIR}/${TRACKNO}.mp3
    fi
done

# mp3gain
#
if [[ -n $GAINMETHOD ]]; then
    echo "Applying gain"
    mp3gain $GAINMETHOD "${OUTDIR}"/*.mp3
fi

echo -e "\nDone: ${CHAPTERS[$TITLE]} mp3 files written to\n${OUTDIR}"

eject ${DVDDEV}
